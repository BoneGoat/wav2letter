# ==================================================================
# module list
# ------------------------------------------------------------------
# Ubuntu           18.04
# CUDA             10.1
# CuDNN            7-dev
# arrayfire        3.6.3                          (git, CUDA backend)
# OpenMPI          latest                         (apt)
# flashlight       master                         (git, CUDA backend)
# python           3.6                            (apt)
# libsndfile       25824cb (master 20190512)      (git)
# MKL              2018.4.057                     (apt)
# FFTW             latest                         (apt)
# KenLM            2ad7cb5 (master 20190512)      (git)
# GLOG             latest                         (apt)
# gflags           latest                         (apt)
# CMake            3.12.4                         (cmake.org)
# ==================================================================

FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04

RUN APT_INSTALL="apt-get install -y --no-install-recommends" && \
    rm -rf /var/lib/apt/lists/* \
           /etc/apt/sources.list.d/cuda.list \
           /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        build-essential \
        ca-certificates \
        wget \
        git \
        vim \
        emacs \
        nano \
        htop \
        g++ \
        # ssh for OpenMPI
        openssh-server openssh-client \
        # OpenMPI
        libopenmpi-dev libomp-dev \
        # nccl: for flashlight
        #libnccl2 libnccl-dev \
        # for libsndfile
        autoconf automake autogen build-essential libasound2-dev \
        libflac-dev libogg-dev libtool libvorbis-dev pkg-config python \
        libopus0 opus-tools \
        # for Intel's Math Kernel Library (MKL)
        cpio \
        # FFTW
        libfftw3-dev \
        # for kenlm
        zlib1g-dev libbz2-dev liblzma-dev libboost-all-dev \
        # gflags
        libgflags-dev libgflags2.2 \
        # for glog
        libgoogle-glog-dev libgoogle-glog0v5 \
        # for receipts data processing
        sox && \
# New cmake is required
apt-get -y purge cmake && wget -qO- "https://cmake.org/files/v3.14/cmake-3.14.4-Linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C /usr/local && \
# ==================================================================
# python (for receipts data processing)
# ------------------------------------------------------------------
    PIP_INSTALL="python3 -m pip --no-cache-dir install --upgrade" && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        software-properties-common \
        && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        python3.6 \
        python3.6-dev \
        && \
    wget -O ~/get-pip.py \
        https://bootstrap.pypa.io/get-pip.py && \
    python3.6 ~/get-pip.py && \
    ln -s /usr/bin/python3.6 /usr/local/bin/python3 && \
    ln -s /usr/bin/python3.6 /usr/local/bin/python && \
    $PIP_INSTALL \
        setuptools \
        && \
    $PIP_INSTALL \
        sox \
        tqdm && \
# ==================================================================
# arrayfire https://github.com/arrayfire/arrayfire/wiki/
# ------------------------------------------------------------------
    cd /tmp && git clone --recursive https://github.com/arrayfire/arrayfire.git && \
    cd arrayfire && git checkout v3.6.3 && \
    mkdir build && cd build && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL ocl-icd-opencl-dev && \
    CXXFLAGS=-DOS_LNX cmake .. -DCMAKE_BUILD_TYPE=Release -DAF_BUILD_CPU=OFF -DAF_BUILD_OPENCL=OFF -DAF_BUILD_EXAMPLES=OFF && \
    make -j8 && \
    make install && \
# ==================================================================
# flashlight https://github.com/facebookresearch/flashlight.git
# ------------------------------------------------------------------
# If the driver is not found (during docker build) the cuda driver api need to be linked against the
# libcuda.so stub located in the lib[64]/stubs directory
    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/x86_64-linux-gnu/libcuda.so.1 && \
    cd /root && git clone --recursive https://github.com/facebookresearch/flashlight.git && \
    cd /root/flashlight && mkdir -p build && \
    cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -DFLASHLIGHT_BACKEND=CUDA && \
    make -j8 && make install && \
# ==================================================================
# libsndfile https://github.com/erikd/libsndfile.git
# ------------------------------------------------------------------
    cd /tmp && git clone https://github.com/erikd/libsndfile.git && \
    cd libsndfile && git checkout 25824cb914fb3b79e18f31fb861e218c84be7d34 && \
    ./autogen.sh && ./configure --enable-werror && \
    make && make check && make install && \
# ==================================================================
# MKL https://software.intel.com/en-us/mkl
# ------------------------------------------------------------------
    cd /tmp && wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    wget https://apt.repos.intel.com/setup/intelproducts.list -O /etc/apt/sources.list.d/intelproducts.list && \
    sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list' && \
    apt-get update && DEBIAN_FRONTEND=noninteractive $APT_INSTALL intel-mkl-64bit-2018.4-057 && \
# ==================================================================
# KenLM https://github.com/kpu/kenlm
# ------------------------------------------------------------------
    cd /root && git clone https://github.com/kpu/kenlm.git && \
    cd kenlm && git checkout 2ad7cb56924cd3c6811c604973f592cb5ef604eb && \
    mkdir build && cd build && \
    cmake .. && \
    make -j8 && make install && \
# ==================================================================
# config & cleanup
# ------------------------------------------------------------------
    ldconfig && \
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/* /tmp/*

RUN mkdir /root/wav2letter
COPY . /root/wav2letter

# ==================================================================
# wav2letter with GPU backend
# ------------------------------------------------------------------
RUN export MKLROOT=/opt/intel/mkl && export KENLM_ROOT_DIR=/root/kenlm && \
    cd /root/wav2letter && mkdir -p build && \
    cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -DW2L_CRITERION_BACKEND=CUDA && \
    make -j8
